@using System.Security.Claims
@model IEnumerable<DoAnCoSo.Models.ApplicationUser>
@inject IWebHostEnvironment env

@{
    ViewData["Title"] = "Quản lý Chat";

    var random = new Random();
    var customerAvatars = new Dictionary<string, string>();

    string[] prefixes = { "avatar" }; // danh sách prefix
    foreach (var customer in Model)
    {
        string prefix = prefixes[random.Next(prefixes.Length)]; // chọn ngẫu nhiên avatar
        int num = random.Next(1, 7); // số từ 1 → 6

        // đặt tên file .jpg
        customerAvatars[customer.Id] = $"{prefix}_{num}.jpg";
    }
}

<div class="container py-4">
    <h2 class="text-center mb-4 fw-bold">💬 CHĂM SÓC KHÁCH HÀNG</h2>

    <div class="row g-4">
        <!-- Sidebar khách hàng -->
        <div class="col-md-3">
            <div class="card shadow h-100" style="border:3px solid #FF6185; border-radius:10px;">
                <div class="card-header fw-bold fs-5" style="border-bottom:3px solid #FF6185;">
                    Danh sách khách hàng
                </div>
                <div class="p-2">
                    <input type="text" id="searchCustomer" class="form-control form-control-sm" placeholder="🔍 Tìm khách hàng...">
                </div>
                <div class="card-body p-0" style="max-height: 500px; overflow-y:auto;">
                    <ul id="customers" class="list-group list-group-flush">
                        @foreach (var customer in Model)
                        {
                            <li class="list-group-item list-group-item-action d-flex align-items-center"
                                id="cust-@customer.Id"
                                data-userid="@customer.Id"
                                onclick="selectCustomer('@customer.Id', '@customer.FullName')"
                                style="cursor:pointer; border:none;">
                                <img src="@($"/images/avatar/{customerAvatars[customer.Id]}")" class="rounded-circle me-2" width="36" height="36" />
                                <span>@customer.FullName</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <!-- Khung chat -->
        <div class="col-md-9 d-flex flex-column">
            <div class="card shadow h-100" style="border:3px solid #FF6185; border-radius:10px; display:flex; flex-direction:column;">
                <div class="card-header fw-bold fs-5 d-flex align-items-center" style="gap:10px; border-bottom:3px solid #FF6185;">
                    <span id="chatWith">💬 Hãy chọn khách hàng</span>
                </div>

                <div id="messagesList" class="card-body flex-grow-1 p-3" style="display:flex; flex-direction:column; overflow-y:auto; min-height:600px; max-height:600px;">
                    <!-- Tin nhắn sẽ hiện ở đây -->
                </div>

                <div class="card-footer d-flex p-2" style="border-top:3px solid #FF6185;">
                    <input id="messageInput" type="text" class="form-control me-2" placeholder="Nhập tin nhắn..." style="border-radius:20px;" />
                    <button id="sendButton" class="btn" style="background-color:#FF6185; color:white; border-radius:20px;">Gửi</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    #chatWith {
        font-size: 1.3rem;
        font-weight: bold;
    }

    /* Khung chat cố định */
    #messagesList {
        display: flex;
        flex-direction: column;
        gap: 8px;
        overflow-y: auto;
    }

    /* Bubble tin nhắn */
    .message-row {
        display: flex;
        align-items: flex-end;
    }

        .message-row.admin {
            justify-content: flex-end;
        }

    .message-bubble {
        max-width: 60%;
        padding: 10px 15px;
        border-radius: 20px;
        font-size: 0.9rem;
        position: relative;
        word-wrap: break-word;
    }

        /* Màu bubble */
        .message-bubble.admin {
            background-color: #FF6185;
            color: white;
        }

        .message-bubble.customer {
            background-color: #d2c6f0; /* tím xám nhạt */
            color: black;
        }

    /* Avatar */
    .message-avatar {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        margin-right: 8px;
    }

    /* Thời gian */
    .message-time {
        font-size: 0.7rem;
        margin-top: 2px;
        text-align: right;
        color: inherit;
    }

    /* Ngắt ngày giống admin */
    .date-separator {
        text-align: center;
        font-size: 0.75rem; /* nhỏ hơn tin nhắn */
        color: #888; /* xám nhạt */
        margin: 10px 0; /* cách đều 2 bên */
        position: relative;
    }

        /* Tạo 2 đường kẻ ngang hai bên separator */
        .date-separator::before,
        .date-separator::after {
            content: "";
            position: absolute;
            top: 50%;
            width: 40%;
            height: 1px;
            background-color: #ccc;
        }

        .date-separator::before {
            left: 40px;
        }

        .date-separator::after {
            right: 40px;
        }

    /* Scrollbar */
    #messagesList::-webkit-scrollbar {
        width: 6px;
    }

    #messagesList::-webkit-scrollbar-thumb {
        background-color: rgba(0,0,0,0.2);
        border-radius: 3px;
    }

    /* Thêm cho số lượng tin nhắn chưa đọc */
    .unread-badge {
        background-color: #FF6185;
        color: white;
        font-size: 0.7rem;
        border-radius: 50%;
        padding: 2px 6px;
        margin-left: auto;
    }

    .list-group-item.unread {
        font-weight: bold;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const messagesList = document.getElementById("messagesList");
        const messageInput = document.getElementById("messageInput");
        const sendButton = document.getElementById("sendButton");
        const chatWith = document.getElementById("chatWith");
        const searchInput = document.getElementById("searchCustomer");
        const ulCustomers = document.getElementById("customers");

        let currentCustomerId = null;
        let currentCustomerName = "";
        const adminId = "@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value";
        let skipCount = 0;
        const pageSize = 50;
        let loadingOlder = false;
        let noMoreMessages = false;
        let allMessages = [];

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        const customerAvatars = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(customerAvatars));

        function getAvatar(customerId){
            return `/images/avatar/${customerAvatars[customerId]}`;
        }

        function createMessageElement(msg){
            const date = new Date(msg.sentAt);
            const row = document.createElement("div");
            row.className = "message-row " + (msg.fromUserId === adminId ? "admin" : "customer");

            if(msg.fromUserId !== adminId){
                const avatar = document.createElement("img");
                avatar.src = getAvatar(msg.fromUserId);
                avatar.className = "message-avatar";
                row.appendChild(avatar);
            }

            const bubble = document.createElement("div");
            bubble.className = "message-bubble " + (msg.fromUserId === adminId ? "admin" : "customer");
            bubble.innerHTML = msg.message +
                `<div class="message-time">${date.toLocaleTimeString("vi-VN",{hour:'2-digit',minute:'2-digit'})}</div>`;
            row.appendChild(bubble);

            return {row, date};
        }

        function formatDateSeparator(date){
            const today = new Date();
            const yesterday = new Date();
            yesterday.setDate(today.getDate()-1);

            if(date.toDateString()===today.toDateString()) return "Hôm nay";
            else if(date.toDateString()===yesterday.toDateString()) return "Hôm qua";
            else return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;
        }

        function addDateSeparator(date, prepend=false){
            const dateText = formatDateSeparator(date);
            const existing = Array.from(messagesList.querySelectorAll(".date-separator"))
                .some(s=>s.innerText===dateText);
            if(existing) return;

            const separator = document.createElement("div");
            separator.className = "date-separator";
            separator.innerText = dateText;

            if(prepend) messagesList.insertBefore(separator, messagesList.firstChild);
            else messagesList.appendChild(separator);
        }

        function renderMessages(scrollToBottom=false){
            messagesList.innerHTML = "";
            allMessages.sort((a,b)=> new Date(a.sentAt)-new Date(b.sentAt));
            let lastDate = null;
            allMessages.forEach(msg=>{
                const {row, date} = createMessageElement(msg);
                if(!lastDate || lastDate.toDateString()!==date.toDateString()){
                    addDateSeparator(date);
                    lastDate = date;
                }
                messagesList.appendChild(row);
            });
            if(scrollToBottom) messagesList.scrollTop = messagesList.scrollHeight;
        }

        async function loadMessages(prepend=false){
            if(!currentCustomerId || loadingOlder || noMoreMessages) return;
            loadingOlder = true;
            const res = await fetch(`/Admin/Chat/GetMessages?customerId=${currentCustomerId}&skip=${skipCount}&take=${pageSize}`);
            const messages = await res.json();
            if(messages.length===0){
                noMoreMessages = true;
                loadingOlder = false;
                return;
            }

            allMessages = prepend ? messages.concat(allMessages) : allMessages.concat(messages);
            renderMessages(!prepend);
            skipCount += pageSize;
            loadingOlder = false;
        }

        messagesList.addEventListener("scroll", async()=>{
            if(messagesList.scrollTop===0 && !loadingOlder && !noMoreMessages){
                const oldHeight = messagesList.scrollHeight;
                await loadMessages(true);
                messagesList.scrollTop = messagesList.scrollHeight - oldHeight;
            }
        });

        function sendMessage(){
            const msg = messageInput.value.trim();
            if(!msg || !currentCustomerId) return;

            const newMsg = {fromUserId: adminId, message: msg, sentAt: new Date()};
            allMessages.push(newMsg);
            renderMessages(true);

            // prepend khách hàng lên đầu
            const li = ulCustomers.querySelector(`li[data-userid='${currentCustomerId}']`);
            if(li) li.parentNode.prepend(li);

            connection.invoke("SendMessageToCustomer", currentCustomerId, msg);
            messageInput.value = "";
        }

        async function updateCustomerList(){
            const res = await fetch("/Admin/Chat/GetCustomers");
            const customers = await res.json();

            customers.forEach(c=>{
                let li = ulCustomers.querySelector(`li[data-userid='${c.id}']`);
                if(li){
                    // Cập nhật badge
                    li.dataset.unread = c.unreadCount;
                    const badge = li.querySelector(".badge");
                    badge.textContent = c.unreadCount;
                    badge.style.display = c.unreadCount>0 ? "inline-block" : "none";
                    li.classList.toggle("unread", c.unreadCount>0);
                } else {
                    // Thêm khách mới
                    li = document.createElement("li");
                    li.className = "list-group-item list-group-item-action d-flex justify-content-between align-items-center";
                    li.dataset.userid = c.id;
                    li.dataset.unread = c.unreadCount;
                    li.innerHTML = `
                        <div>
                            <img src="${getAvatar(c.id)}" class="rounded-circle me-2" width="36" height="36"/>
                            <span>${c.fullName}</span>
                        </div>
                        <span class="badge bg-danger rounded-pill" style="display:${c.unreadCount>0?"inline-block":"none"}">${c.unreadCount}</span>
                    `;
                    li.onclick = ()=> selectCustomer(c.id, c.fullName);
                    ulCustomers.appendChild(li);
                }
            });
        }

        sendButton.addEventListener("click", sendMessage);
        messageInput.addEventListener("keydown", e=>{
            if(e.key==="Enter" && !e.shiftKey){
                e.preventDefault();
                sendMessage();
            }
        });

        let customerListData = []; // lưu danh sách khách hiện tại

        async function loadCustomerList() {
            try {
                const res = await fetch("/Admin/Chat/GetCustomers");
                const customers = await res.json();

                customerListData = customers; // lưu danh sách vào biến toàn cục
                ulCustomers.innerHTML = "";

                customers.forEach(c => {
                    const li = document.createElement("li");
                    li.className = "list-group-item list-group-item-action d-flex justify-content-between align-items-center";
                    li.dataset.userid = c.id;
                    li.dataset.unread = c.unreadCount;
                    li.innerHTML = `
                        <div>
                            <img src="${getAvatar(c.id)}" class="rounded-circle me-2" width="36" height="36"/>
                            <span>${c.fullName}</span>
                        </div>
                        <span class="badge bg-danger rounded-pill" style="display:${c.unreadCount > 0 ? "inline-block" : "none"}">${c.unreadCount}</span>
                    `;
                    if (c.unreadCount > 0) li.classList.add("unread");
                    li.onclick = () => selectCustomer(c.id, c.fullName);
                    ulCustomers.appendChild(li);
                });
            } catch (err) {
                console.error("Lỗi khi load danh sách khách:", err);
            }
        }

        window.selectCustomer = async function(customerId, name){
            currentCustomerId = customerId;
            currentCustomerName = name;
            chatWith.textContent = "💬 "+name;
            allMessages=[];
            skipCount=0;
            noMoreMessages=false;
            messagesList.innerHTML="";
            await loadMessages();

            // mark read
            await fetch(`/Admin/Chat/MarkAsRead?customerId=${customerId}`, {method:"POST"});
            const li = document.querySelector(`#customers li[data-userid='${customerId}']`);
            if(li){
                li.dataset.unread=0;
                li.querySelector(".badge").style.display="none";
                li.classList.remove("unread");
            }
        }

        connection.on("ReceiveMessage", async (senderId, senderName, message, sentAt)=>{
            const li = document.querySelector(`#customers li[data-userid='${senderId}']`);
            if(!li) return;

            // nếu đang chat với người nhắn, append tin nhắn và mark read
            if(senderId===currentCustomerId){
                allMessages.push({fromUserId:senderId, message, sentAt});
                renderMessages(true);
                await fetch(`/Admin/Chat/MarkAsRead?customerId=${senderId}`, {method:"POST"});
                li.dataset.unread=0;
                li.querySelector(".badge").style.display="none";
                li.classList.remove("unread");
            } else {
                // tăng badge
                let count = parseInt(li.dataset.unread) || 0;
                count++;
                li.dataset.unread = count;
                li.querySelector(".badge").textContent = count;
                li.querySelector(".badge").style.display="inline-block";
                li.classList.add("unread");
            }

            // nhảy đầu danh sách khi có tin nhắn mới
            li.parentNode.prepend(li);
        });

        connection.start();
        loadCustomerList();

        const customerList = Array.from(document.querySelectorAll("#customers li"));
        searchInput.addEventListener("input", function () {
            const keyword = this.value.toLowerCase();
            const ul = document.getElementById("customers");
            ul.innerHTML = ""; // xóa toàn bộ
            customerList.forEach(li => {
                if (li.textContent.toLowerCase().includes(keyword)) {
                    ul.appendChild(li);
                }
            });
        });
    });
</script>
