@model List<DoAnCoSo.Models.Product>
@{
    ViewData["Title"] = "Sản phẩm yêu thích";
}
<div class="container mt-4">
    <h2 class="text-center">SẢN PHẨM YÊU THÍCH</h2>
    @if (Model.Any())
    {
        <div class="row row-cols-1 row-cols-md-4 g-2" style="margin-left: 0 !important;">
            @foreach (var item in Model)
            {
                <div class="col mt-3">

                    <div class="card h-100">
                        @* Chỉnh sửa kích thước cố định cho hình ảnh  *@
                        <div class="product-img-wrapper">
                            <img src="@item.ImageUrl" class="card-img-top" alt="@item.Name">
                        </div>

                        <div class="card-body d-flex flex-column">
                            <h5 class="fw-bold">@item.Name</h5>
                            <p>Thương hiệu: <span class="text-primary fw-semibold">@item.Trademark</span></p>
                            <div class="bg-light p-2 rounded">
                                <p class="mb-0">
                                    @if (@item.PriceReduced != null && @item.PriceReduced > 0 && @item.PriceReduced < @item.Price)
                                    {
                                        // Nếu có giá giảm -> Hiển thị giá giảm, giá gốc gạch ngang và phần trăm giảm
                                        <span class="fw-bold text-danger fs-4">@($"{item.PriceReduced:N0}đ")</span>

                                        <del class="text-muted">@item.Price.ToString("0.##")đ</del>
                                        <span class="badge bg-danger">@item.DiscountPercentage.ToString("0.##")%</span>
                                    }
                                    else
                                    {
                                        // Nếu không nhập giá giảm -> Chỉ hiển thị giá gốc
                                        <span class="fw-bold text-danger fs-4">@($"{@item.Price:N0}đ")</span>
                                    }
                                </p>
                            </div>
                            <div class="mt-auto text-center d-flex flex-column gap-2">
                                <div class="d-flex gap-2 w-100">

                                    <a href="@Url.Action("BuyNow", "ShoppingCart", new { productId =item.Id, quantity = 1 })"
                                       class="btn btn-primary btn-sm w-50">Mua Ngay</a>
                                    <a asp-controller="Product" asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-secondary btn-sm w-50">Xem Chi Tiết</a>

                                    <button class="btn btn-sm favorite-btn mx-auto w-20
    @(ViewBag.FavoriteIds != null && ((List<int>)ViewBag.FavoriteIds).Contains(item.Id) ? "btn-danger" : "btn-outline-danger")"
                                            data-id="@item.Id"
                                            data-authenticated="@User.Identity.IsAuthenticated.ToString().ToLower()">
                                        <i class="@(ViewBag.FavoriteIds != null && ((List<int>)ViewBag.FavoriteIds).Contains(item.Id) ? "bi-heart-fill" : "bi-heart")"></i>
                                    </button>

                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            }
        </div>
    }
    else
    {
        <p class="text-center">Bạn chưa có sản phẩm yêu thích nào.</p>
    }
</div>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenInput ? tokenInput.value : '';

        document.querySelectorAll('.favorite-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const productId = btn.getAttribute('data-id');
                const isAuthenticated = btn.getAttribute('data-authenticated') === 'true';

                if (!isAuthenticated) {
                    window.location.href = '/Identity/Account/Login';
                    return;
                }

                try {
                    const response = await fetch('/Favorite/Toggle', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ id: productId })
                    });

                    const data = await response.json();
                    if (data.success) {
                        btn.classList.toggle('btn-danger', data.isFavorited);
                        btn.classList.toggle('btn-outline-danger', !data.isFavorited);

                        const icon = btn.querySelector('i');
                        icon.classList.toggle('bi-heart-fill', data.isFavorited);
                        icon.classList.toggle('bi-heart', !data.isFavorited);

                        const countElement = document.querySelector('.js-wishlist-count');
                        if (countElement && !isNaN(data.count)) {
                            countElement.textContent = data.count;
                        }

                        // Nếu sản phẩm bị bỏ yêu thích, reload trang
                        if (!data.isFavorited) {
                            window.location.reload();  // Reload lại trang để cập nhật danh sách
                        }
                    }
                } catch (err) {
                    console.error('Toggle yêu thích lỗi:', err);
                }
            });
        });

        // Cập nhật icon yêu thích khi load trang
        fetch('/Favorite/GetFavoriteStatus')
            .then(response => response.json())
            .then(data => {
                document.querySelectorAll('.favorite-btn').forEach(btn => {
                    const productId = btn.getAttribute('data-id');
                    const isFavorited = data.favoriteIds.includes(parseInt(productId));

                    btn.classList.toggle('btn-danger', isFavorited);
                    btn.classList.toggle('btn-outline-danger', !isFavorited);

                    const icon = btn.querySelector('i');
                    icon.classList.toggle('bi-heart-fill', isFavorited);
                    icon.classList.toggle('bi-heart', !isFavorited);
                });
            });
    });
</script>