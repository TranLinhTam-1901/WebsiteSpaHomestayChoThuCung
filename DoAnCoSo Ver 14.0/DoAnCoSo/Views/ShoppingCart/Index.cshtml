@* --- THAY ĐỔI LỚN: Khai báo Model mới là ShoppingCartViewModel --- *@
@model DoAnCoSo.ViewModels.ShoppingCartViewModel

<div class="container py-4">
    <h2 class="mb-4">🛒 Giỏ Hàng Của Bạn</h2>

    @* --- ĐÃ SỬA LỖI CS1061 TẠI ĐÂY: Kiểm tra Model.CartItemsFromDb thay vì Model trực tiếp --- *@
    @if (Model != null && Model.CartItemsFromDb != null && Model.CartItemsFromDb.Any())
    {
        @* --- THÊM MỚI: Form bao quanh bảng và nút thanh toán. Phương thức GET để gửi ID lên URL. --- *@
        <form id="checkoutForm" asp-controller="ShoppingCart" asp-action="Checkout" method="get">

            @Html.AntiForgeryToken() 

            <table class="table table-bordered align-middle text-center">
                <thead class="table-dark">
                    <tr>
                        @* --- THÊM MỚI: Cột Checkbox Chọn Tất Cả --- *@
                        <th style="width: 50px;">
                            <input type="checkbox" id="selectAllItems" class="form-check-input" checked />
                        </th>
                        <th>Ảnh</th>
                        <th>Sản Phẩm</th>
                        <th>Số Lượng</th>
                        <th>Giá</th>
                        <th>Tổng</th>
                        <th>Hương vị</th>
                        <th>Hành Động</th>
                    </tr>
                </thead>
                <tbody>
                    @* --- THAY ĐỔI: Lặp qua Model.CartItemsFromDb --- *@
                    @foreach (var item in Model.CartItemsFromDb)
                    {
                        @if (item.Product != null)
                        {
                            @* --- THÊM MỚI: data attributes cho hàng để JS dễ đọc thông tin --- *@
                            <tr id="cartItemRow_@item.Id"
                                data-cart-item-id="@item.Id"
                                data-product-price-per-unit="@((item.Product.PriceReduced.HasValue && item.Product.PriceReduced > 0 ? item.Product.PriceReduced.Value : item.Product.Price).ToString(System.Globalization.CultureInfo.InvariantCulture))"
                                data-current-quantity="@item.Quantity">
                               
                                <td>
                                    <input type="checkbox" name="selectedCartItemIds" value="@item.Id" class="form-check-input item-checkbox" checked />
                                </td>
                                <td>
                                    <img src="@item.Product.ImageUrl" alt="Ảnh sản phẩm" class="img-thumbnail" width="70">
                                </td>
                                <td class="text-start">
                                    <strong>@item.Product.Name</strong>
                                </td>
                                <td>
                                    <div class="d-flex justify-content-center align-items-center">
                                        @* Đã bỏ nút '-' *@
                                        <input type="number" class="form-control text-center quantity-input"
                                               style="width: 70px;" min="1" value="@item.Quantity"
                                               data-cart-item-id="@item.Id"
                                               data-product-id="@item.Product.Id"
                                               data-price="@((item.Product.PriceReduced.HasValue && item.Product.PriceReduced > 0 ? item.Product.PriceReduced.Value : item.Product.Price).ToString(System.Globalization.CultureInfo.InvariantCulture))"
                                               data-flavor="@item.SelectedFlavor" />
                                        @* Đã bỏ nút '+' *@
                                    </div>
                                </td>
                                <td class="text-danger fw-bold">
                                    @((item.Product.PriceReduced.HasValue && item.Product.PriceReduced > 0 ? item.Product.PriceReduced.Value : item.Product.Price).ToString("N0"))đ
                                </td>

                                <td class="fw-bold item-total-price">
                                    @(((item.Product.PriceReduced.HasValue && item.Product.PriceReduced > 0 ? item.Product.PriceReduced.Value : item.Product.Price) * item.Quantity).ToString("N0"))đ
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.SelectedFlavor))
                                    {
                                        <span>@item.SelectedFlavor</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Mặc định</span>
                                    }
                                </td>
                                <td>
                                    @* --- THAY ĐỔI: Chuyển nút xóa thành button có sự kiện JS (dùng CartItem.Id) --- *@
                                    <button type="button" class="btn btn-sm btn-danger btn-remove" data-id="@item.Id">
                                        <i class="fas fa-trash"></i> Xóa
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <div class="d-flex justify-content-between align-items-center mt-3">
                @* --- THÊM MỚI: Hiển thị tổng tiền các mục đã chọn --- *@
                <h4 class="text-end fw-bold">Tổng tiền đã chọn: <span id="totalSelectedPrice" class="text-danger fw-bold">0 VNĐ</span></h4>

                @* --- THAY ĐỔI: Nút "Tới trang thanh toán" trở thành nút submit của form --- *@
                <button type="submit" class="btn btn-success px-4 py-2">
                    <i class="fas fa-credit-card"></i> Thanh Toán Các Mục Đã Chọn
                </button>
            </div>
        </form>
    }
    else
    {
        <div class="alert alert-warning text-center">
            🛍️ Giỏ hàng của bạn đang trống. <a asp-controller="Home" asp-action="Index" class="fw-bold">Tiếp tục mua sắm</a>!
        </div>
    }
</div>
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // --- CÁC BIẾN DOM CHO CHỨC NĂNG CHỌN LỌC ---
            const selectAllCheckbox = document.getElementById('selectAllItems');
            let itemCheckboxes = document.querySelectorAll('.item-checkbox');
            const totalSelectedPriceSpan = document.getElementById('totalSelectedPrice');
            const checkoutForm = document.getElementById('checkoutForm');

            // --- HÀM TÍNH TOÁN VÀ CẬP NHẬT TỔNG TIỀN CÁC MỤC ĐÃ CHỌN ---
            function updateSelectedTotalPrice() {
                let total = 0;
                itemCheckboxes = document.querySelectorAll('.item-checkbox'); // Cập nhật lại itemCheckboxes nếu có item bị xóa khỏi DOM
                itemCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        const row = checkbox.closest('tr');
                        const pricePerUnit = parseFloat(row.dataset.productPricePerUnit);
                        const quantity = parseInt(row.querySelector('.quantity-input').value);
                        total += pricePerUnit * quantity;
                    }
                });
                totalSelectedPriceSpan.textContent = total.toLocaleString('vi-VN') + ' VNĐ';
            }

            // --- XỬ LÝ SỰ KIỆN KHI CHECKBOX "CHỌN TẤT CẢ" THAY ĐỔI ---
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function () {
                    itemCheckboxes.forEach(checkbox => {
                        checkbox.checked = this.checked;
                    });
                    updateSelectedTotalPrice();
                });
            }

            // --- XỬ LÝ SỰ KIỆN KHI TỪNG CHECKBOX SẢN PHẨM THAY ĐỔI ---
            document.body.addEventListener('change', function(event) {
                if (event.target.classList.contains('item-checkbox')) {
                    const checkbox = event.target;
                    if (!checkbox.checked) {
                        if (selectAllCheckbox) {
                            selectAllCheckbox.checked = false;
                        }
                    } else {
                        const allChecked = Array.from(document.querySelectorAll('.item-checkbox')).every(cb => cb.checked);
                        if (selectAllCheckbox) {
                            selectAllCheckbox.checked = allChecked;
                        }
                    }
                    updateSelectedTotalPrice();
                }
            });

            // --- XỬ LÝ SỰ KIỆN KHI SỐ LƯỢNG SẢN PHẨM THAY ĐỔI ---
            document.querySelectorAll(".quantity-input").forEach(input => {
                input.addEventListener("change", async function () {
                    const cartItemId = this.dataset.cartItemId;
                    const productId = this.dataset.productId;
                    let newQuantity = parseInt(this.value);
                    const row = this.closest('tr');
                    const originalQuantity = parseInt(row.dataset.currentQuantity);

                    if (isNaN(newQuantity) || newQuantity < 0) {
                        alert('Số lượng không hợp lệ. Vui lòng nhập số lớn hơn hoặc bằng 0.');
                        this.value = originalQuantity;
                        return;
                    }

                    if (newQuantity === originalQuantity) {
                        return;
                    }

                    try {
                        const response = await fetch('/ShoppingCart/UpdateQuantity', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({
                                CartItemId: parseInt(cartItemId),
                                ProductId: parseInt(productId),
                                Quantity: newQuantity
                            })
                        });

                        if (response.ok) {
                            const result = await response.json();
                            if (result.success) {
                                const itemTotalPriceElement = row.querySelector('.item-total-price');
                                if (itemTotalPriceElement && result.itemTotalPrice) {
                                    itemTotalPriceElement.textContent = result.itemTotalPrice;
                                }

                                const cartOverallTotalElement = document.getElementById('cartOverallTotal');
                                if (cartOverallTotalElement && result.cartOverallTotal) {
                                    cartOverallTotalElement.textContent = result.cartOverallTotal;
                                }

                                row.dataset.currentQuantity = result.newQuantity;
                                this.value = result.newQuantity;

                                if (result.action === "removed") {
                                    row.remove();
                                    itemCheckboxes = document.querySelectorAll('.item-checkbox');
                                    if (itemCheckboxes.length === 0) {
                                        document.querySelector('.container.py-4').innerHTML = `
                                            <h2 class="mb-4">🛒 Giỏ Hàng Của Bạn</h2>
                                            <div class="alert alert-warning text-center">
                                                🛍️ Giỏ hàng của bạn đang trống. <a href="/Home/Index" class="fw-bold">Tiếp tục mua sắm</a>!
                                            </div>
                                        `;
                                    }
                                }
                                updateSelectedTotalPrice();
                            } else {
                                alert('Cập nhật số lượng thất bại: ' + result.message);
                                this.value = originalQuantity;
                            }
                        } else {
                            alert('Lỗi server khi cập nhật số lượng.');
                            this.value = originalQuantity;
                            console.error('Fetch Error:', response.status, response.statusText);
                            const errorText = await response.text();
                            console.error('Server Response:', errorText);
                        }
                    } catch (error) {
                        console.error('Lỗi khi gửi AJAX cập nhật số lượng:', error);
                        alert('Đã xảy ra lỗi trong quá trình cập nhật số lượng.');
                        this.value = originalQuantity;
                    }
                });
            });


            // --- LOGIC NÚT XÓA SẢN PHẨM (SỬ DỤNG EVENT DELEGATION) ---
            document.body.addEventListener('click', async function(event) {
                if (event.target.classList.contains('btn-remove') || event.target.closest('.btn-remove')) {
                    const button = event.target.closest('.btn-remove');
                    const cartItemId = button.dataset.id; // Lấy data-id từ nút đã click

                    if (!confirm('Bạn có chắc chắn muốn xóa sản phẩm này khỏi giỏ hàng?')) {
                        return;
                    }

                    try {
                        const response = await fetch('@Url.Action("RemoveFromCart", "ShoppingCart")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({ cartItemId: parseInt(cartItemId) })
                        });

                        if (response.ok) {
                            const result = await response.json();
                            if (result.success) {
                                alert(result.message);
                                const row = button.closest('tr'); // Sử dụng 'button' thay vì 'this'
                                if (row) {
                                    row.remove(); // Xóa hàng khỏi DOM
                                }
                                itemCheckboxes = document.querySelectorAll('.item-checkbox'); // Cập nhật lại danh sách checkbox
                                updateSelectedTotalPrice(); // Cập nhật tổng tiền các mục đã chọn

                                const cartOverallTotalElement = document.getElementById('cartOverallTotal');
                                if (cartOverallTotalElement && result.cartOverallTotal) {
                                    cartOverallTotalElement.textContent = result.cartOverallTotal;
                                }

                                if (selectAllCheckbox) {
                                    const allChecked = Array.from(itemCheckboxes).every(cb => cb.checked);
                                    selectAllCheckbox.checked = allChecked && itemCheckboxes.length > 0;
                                }
                                if (itemCheckboxes.length === 0) { // Nếu giỏ hàng trống, hiển thị thông báo
                                    document.querySelector('.container.py-4').innerHTML = `
                                        <h2 class="mb-4">🛒 Giỏ Hàng Của Bạn</h2>
                                        <div class="alert alert-warning text-center">
                                            🛍️ Giỏ hàng của bạn đang trống. <a href="/Home/Index" class="fw-bold">Tiếp tục mua sắm</a>!
                                        </div>
                                    `;
                                }
                            } else {
                                alert('Xóa sản phẩm thất bại: ' + result.message);
                            }
                        } else {
                            alert('Lỗi server khi xóa sản phẩm. Vui lòng thử lại.');
                            console.error('Fetch Error:', response.status, response.statusText);
                            const errorText = await response.text();
                            console.error('Server Response:', errorText);
                        }
                    } catch (error) {
                        console.error('Lỗi khi gửi AJAX xóa sản phẩm:', error);
                        alert('Đã xảy ra lỗi trong quá trình xóa sản phẩm.');
                    }
                }
            });

            // --- XỬ LÝ SỰ KIỆN SUBMIT FORM THANH TOÁN (giữ nguyên) ---
            if (checkoutForm) {
                checkoutForm.addEventListener('submit', function(event) {
                    const selectedItems = Array.from(document.querySelectorAll('.item-checkbox')).filter(cb => cb.checked);
                    if (selectedItems.length === 0) {
                        alert('Vui lòng chọn ít nhất một sản phẩm để thanh toán.');
                        event.preventDefault();
                    }
                });
            }

            // --- GỌI HÀM TÍNH TOÁN TỔNG TIỀN KHI TRANG TẢI XONG LẦN ĐẦU ---
            setTimeout(updateSelectedTotalPrice, 100);
        });
    </script>
}

